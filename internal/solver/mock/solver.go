// Code generated by MockGen. DO NOT EDIT.
// Source: internal/solver/solver.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	solver "uci-impl/internal/solver"
)

// MockSolver is a mock of Solver interface
type MockSolver struct {
	ctrl     *gomock.Controller
	recorder *MockSolverMockRecorder
}

// MockSolverMockRecorder is the mock recorder for MockSolver
type MockSolverMockRecorder struct {
	mock *MockSolver
}

// NewMockSolver creates a new mock instance
func NewMockSolver(ctrl *gomock.Controller) *MockSolver {
	mock := &MockSolver{ctrl: ctrl}
	mock.recorder = &MockSolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSolver) EXPECT() *MockSolverMockRecorder {
	return m.recorder
}

// GetOption mocks base method
func (m *MockSolver) GetOption(arg0 string) *string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOption", arg0)
	ret0, _ := ret[0].(*string)
	return ret0
}

// GetOption indicates an expected call of GetOption
func (mr *MockSolverMockRecorder) GetOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOption", reflect.TypeOf((*MockSolver)(nil).GetOption), arg0)
}

// SetOption mocks base method
func (m *MockSolver) SetOption(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOption", arg0, arg1)
}

// SetOption indicates an expected call of SetOption
func (mr *MockSolverMockRecorder) SetOption(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOption", reflect.TypeOf((*MockSolver)(nil).SetOption), arg0, arg1)
}

// GetOptions mocks base method
func (m *MockSolver) GetOptions() []*solver.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptions")
	ret0, _ := ret[0].([]*solver.Option)
	return ret0
}

// GetOptions indicates an expected call of GetOptions
func (mr *MockSolverMockRecorder) GetOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptions", reflect.TypeOf((*MockSolver)(nil).GetOptions))
}

// SetPosition mocks base method
func (m *MockSolver) SetPosition(arg0 string, arg1 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetPosition", varargs...)
}

// SetPosition indicates an expected call of SetPosition
func (mr *MockSolverMockRecorder) SetPosition(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPosition", reflect.TypeOf((*MockSolver)(nil).SetPosition), varargs...)
}

// SetStartPosition mocks base method
func (m *MockSolver) SetStartPosition(arg0 ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetStartPosition", varargs...)
}

// SetStartPosition indicates an expected call of SetStartPosition
func (mr *MockSolverMockRecorder) SetStartPosition(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStartPosition", reflect.TypeOf((*MockSolver)(nil).SetStartPosition), arg0...)
}

// DoMove mocks base method
func (m *MockSolver) DoMove(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoMove", arg0)
}

// DoMove indicates an expected call of DoMove
func (mr *MockSolverMockRecorder) DoMove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoMove", reflect.TypeOf((*MockSolver)(nil).DoMove), arg0)
}

// StartSearch mocks base method
func (m *MockSolver) StartSearch(arg0 *solver.SearchParams, arg1 ...string) chan []string {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSearch", varargs...)
	ret0, _ := ret[0].(chan []string)
	return ret0
}

// StartSearch indicates an expected call of StartSearch
func (mr *MockSolverMockRecorder) StartSearch(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSearch", reflect.TypeOf((*MockSolver)(nil).StartSearch), varargs...)
}

// StopSearch mocks base method
func (m *MockSolver) StopSearch() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopSearch")
}

// StopSearch indicates an expected call of StopSearch
func (mr *MockSolverMockRecorder) StopSearch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSearch", reflect.TypeOf((*MockSolver)(nil).StopSearch))
}

// PonderHit mocks base method
func (m *MockSolver) PonderHit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PonderHit")
}

// PonderHit indicates an expected call of PonderHit
func (mr *MockSolverMockRecorder) PonderHit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PonderHit", reflect.TypeOf((*MockSolver)(nil).PonderHit))
}
