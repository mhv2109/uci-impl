// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler/output.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	info "uci-impl/internal/handler/info"
	solver "uci-impl/internal/solver"
)

// MockEmitter is a mock of Emitter interface
type MockEmitter struct {
	ctrl     *gomock.Controller
	recorder *MockEmitterMockRecorder
}

// MockEmitterMockRecorder is the mock recorder for MockEmitter
type MockEmitterMockRecorder struct {
	mock *MockEmitter
}

// NewMockEmitter creates a new mock instance
func NewMockEmitter(ctrl *gomock.Controller) *MockEmitter {
	mock := &MockEmitter{ctrl: ctrl}
	mock.recorder = &MockEmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmitter) EXPECT() *MockEmitterMockRecorder {
	return m.recorder
}

// EmitID mocks base method
func (m *MockEmitter) EmitID() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitID")
}

// EmitID indicates an expected call of EmitID
func (mr *MockEmitterMockRecorder) EmitID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitID", reflect.TypeOf((*MockEmitter)(nil).EmitID))
}

// EmitUCIOK mocks base method
func (m *MockEmitter) EmitUCIOK() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitUCIOK")
}

// EmitUCIOK indicates an expected call of EmitUCIOK
func (mr *MockEmitterMockRecorder) EmitUCIOK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitUCIOK", reflect.TypeOf((*MockEmitter)(nil).EmitUCIOK))
}

// EmitReadyOK mocks base method
func (m *MockEmitter) EmitReadyOK() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitReadyOK")
}

// EmitReadyOK indicates an expected call of EmitReadyOK
func (mr *MockEmitterMockRecorder) EmitReadyOK() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitReadyOK", reflect.TypeOf((*MockEmitter)(nil).EmitReadyOK))
}

// EmitBestmove mocks base method
func (m *MockEmitter) EmitBestmove(moves ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range moves {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "EmitBestmove", varargs...)
}

// EmitBestmove indicates an expected call of EmitBestmove
func (mr *MockEmitterMockRecorder) EmitBestmove(moves ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitBestmove", reflect.TypeOf((*MockEmitter)(nil).EmitBestmove), moves...)
}

// EmitCopyProtection mocks base method
func (m *MockEmitter) EmitCopyProtection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitCopyProtection")
}

// EmitCopyProtection indicates an expected call of EmitCopyProtection
func (mr *MockEmitterMockRecorder) EmitCopyProtection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitCopyProtection", reflect.TypeOf((*MockEmitter)(nil).EmitCopyProtection))
}

// EmitRegistration mocks base method
func (m *MockEmitter) EmitRegistration() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitRegistration")
}

// EmitRegistration indicates an expected call of EmitRegistration
func (mr *MockEmitterMockRecorder) EmitRegistration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitRegistration", reflect.TypeOf((*MockEmitter)(nil).EmitRegistration))
}

// EmitInfo mocks base method
func (m *MockEmitter) EmitInfo(i info.Info) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitInfo", i)
}

// EmitInfo indicates an expected call of EmitInfo
func (mr *MockEmitterMockRecorder) EmitInfo(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitInfo", reflect.TypeOf((*MockEmitter)(nil).EmitInfo), i)
}

// EmitOption mocks base method
func (m *MockEmitter) EmitOption(s solver.Solver) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitOption", s)
}

// EmitOption indicates an expected call of EmitOption
func (mr *MockEmitterMockRecorder) EmitOption(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitOption", reflect.TypeOf((*MockEmitter)(nil).EmitOption), s)
}
